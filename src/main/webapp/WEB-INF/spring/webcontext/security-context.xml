<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

<!-- enable Method level [vs URL level] authorization  This work for ROOT WEB APPLICATION Level scanned components
      Does NOT recognize WEB Application level components - for THAT  need to place enable line in Dispatcher-servlet-->
	<security:global-method-security pre-post-annotations="enabled"/>	

<!-- security:http enables security filter mechanism...name space configuration is activated -->
<!-- use-expressions enables URL level authorization - allows SPEL syntax-->
	<security:http use-expressions="true" access-denied-page="/deniedPage">
	
	<!-- if  non-standard ports for HTTP and/or HTTPS, you can specify them here  -->
<!-- 	    <security:port-mappings>
      		<security:port-mapping http="9080" https="9443"/>
    	</security:port-mappings>
 -->	
	<!-- We will just use web.xml error for access-denied -->
	<!-- Other Options to redirect exception for web authorization -->
<!-- 	<security:access-denied-handler error-page="/error-forbidden" />
 	
   <security:access-denied-handler ref="controllerExceptionHandler" />   
 	-->
	
	<!-- Implemented with Web based URL - Controller "METHOD" level authorization -->
	<!-- the more specific rules need to come first, followed by the more general ones. -->
	<!-- COMMENT out the following to see @Service METHOD level authorization -->
	  <security:intercept-url pattern="/vacancy/addVacancy" access="hasRole('ROLE_ADMIN')"/>  	
	  <security:intercept-url pattern="/members" access="hasAnyRole('ROLE_ADMIN','ROLE_USER')"/>
	  <security:intercept-url pattern="/denied" access="hasRole('ROLE_USER')"/>
	  <security:intercept-url pattern="/start" access="hasAnyRole('ROLE_ADMIN','ROLE_USER')"/>
	  <security:intercept-url pattern="/home" access="hasAnyRole('ROLE_ADMIN','ROLE_USER')"/>
<!-- Switch to HTTPS -->
<!--  	  <security:intercept-url pattern="/login" access="isAnonymous()" requires-channel="https"/>
 	  <security:intercept-url pattern="/logout" access="hasRole('ROLE_ADMIN')" requires-channel="http"/>
 --> 	
 	<!-- BASIC login -->
 <!-- 	 		<security:form-login />
  -->	
 	
		<!-- always-use-default-target overrides where login was triggered routes to default-target-url -->
		<!-- logout-url renames j_security_logout URL -->
		<!-- similarly username,password,login-processing  renames j_security_* stuff -->
		<!-- e.g., /j_spring_security_check is default for login-processing-url-->
  		<security:form-login 
 		 login-page="/login" 
				login-processing-url="/postLogin"
				username-parameter="username" 
				password-parameter="password"
 			    default-target-url="/start"    
               always-use-default-target="true"   
               authentication-failure-url="/loginfailed"
              />
 
         <security:logout logout-success-url="/logout" 
          delete-cookies="JSESSIONID" logout-url= "/doLogout"/>
         
		<!-- BY DEFAULT the URL /j_spring_security_logout triggers logout 
					logout-url= "/doLogout" REPLACES it 
		NOTE: is it JUST a URL naming convention - no mapping occurs
		-->
		   <!-- enable remember me -->
 	<security:remember-me data-source-ref="dataSource" 
	             token-validity-seconds="86400" remember-me-parameter="keepMe"/>
	           

	</security:http>


<security:authentication-manager alias="authenticationManager">
	<security:authentication-provider user-service-ref="userDetailsServiceImpl">
		<!-- <security:password-encoder ref="encoder" hash="md5"/> -->
		<security:password-encoder ref="encoder"/>
	</security:authentication-provider>
</security:authentication-manager>

<!-- Use a Md5 encoder since the user's passwords are stored as Md5 in the database -->
<!--  <bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/> -->
 <bean id="encoder"
          class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
        <constructor-arg name="strength" value="11"/>
    </bean>
 <!-- A custom service where Spring will retrieve users and their corresponding access levels  -->
 <bean id="userDetailsServiceImpl" class="com.mum.servicesimpl.UserDetailsServiceImpl"/>
 

	


</beans>
